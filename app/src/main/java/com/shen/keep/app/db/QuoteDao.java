package com.shen.keep.app.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.shen.keep.model.Quote;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "QUOTE".
*/
public class QuoteDao extends AbstractDao<Quote, Long> {

    public static final String TABLENAME = "QUOTE";

    /**
     * Properties of entity Quote.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Title = new Property(1, String.class, "title", false, "title");
        public final static Property Content = new Property(2, String.class, "content", false, "content");
        public final static Property BgImgUrl = new Property(3, String.class, "bgImgUrl", false, "bgImgUrl");
        public final static Property TitleColor = new Property(4, String.class, "titleColor", false, "titleColor");
        public final static Property ContentColor = new Property(5, String.class, "contentColor", false, "contentColor");
        public final static Property AppImgUrl = new Property(6, String.class, "appImgUrl", false, "appImgUrl");
        public final static Property AppName = new Property(7, String.class, "appName", false, "appName");
        public final static Property CountTime = new Property(8, long.class, "countTime", false, "COUNT_TIME");
    }


    public QuoteDao(DaoConfig config) {
        super(config);
    }
    
    public QuoteDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"QUOTE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"title\" TEXT," + // 1: title
                "\"content\" TEXT," + // 2: content
                "\"bgImgUrl\" TEXT," + // 3: bgImgUrl
                "\"titleColor\" TEXT," + // 4: titleColor
                "\"contentColor\" TEXT," + // 5: contentColor
                "\"appImgUrl\" TEXT," + // 6: appImgUrl
                "\"appName\" TEXT," + // 7: appName
                "\"COUNT_TIME\" INTEGER NOT NULL );"); // 8: countTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"QUOTE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Quote entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(2, title);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(3, content);
        }
 
        String bgImgUrl = entity.getBgImgUrl();
        if (bgImgUrl != null) {
            stmt.bindString(4, bgImgUrl);
        }
 
        String titleColor = entity.getTitleColor();
        if (titleColor != null) {
            stmt.bindString(5, titleColor);
        }
 
        String contentColor = entity.getContentColor();
        if (contentColor != null) {
            stmt.bindString(6, contentColor);
        }
 
        String appImgUrl = entity.getAppImgUrl();
        if (appImgUrl != null) {
            stmt.bindString(7, appImgUrl);
        }
 
        String appName = entity.getAppName();
        if (appName != null) {
            stmt.bindString(8, appName);
        }
        stmt.bindLong(9, entity.getCountTime());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Quote entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(2, title);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(3, content);
        }
 
        String bgImgUrl = entity.getBgImgUrl();
        if (bgImgUrl != null) {
            stmt.bindString(4, bgImgUrl);
        }
 
        String titleColor = entity.getTitleColor();
        if (titleColor != null) {
            stmt.bindString(5, titleColor);
        }
 
        String contentColor = entity.getContentColor();
        if (contentColor != null) {
            stmt.bindString(6, contentColor);
        }
 
        String appImgUrl = entity.getAppImgUrl();
        if (appImgUrl != null) {
            stmt.bindString(7, appImgUrl);
        }
 
        String appName = entity.getAppName();
        if (appName != null) {
            stmt.bindString(8, appName);
        }
        stmt.bindLong(9, entity.getCountTime());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Quote readEntity(Cursor cursor, int offset) {
        Quote entity = new Quote( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // title
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // content
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // bgImgUrl
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // titleColor
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // contentColor
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // appImgUrl
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // appName
            cursor.getLong(offset + 8) // countTime
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Quote entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTitle(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setContent(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setBgImgUrl(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setTitleColor(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setContentColor(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setAppImgUrl(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setAppName(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setCountTime(cursor.getLong(offset + 8));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Quote entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Quote entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Quote entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
