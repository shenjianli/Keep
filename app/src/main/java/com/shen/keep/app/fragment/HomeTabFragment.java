package com.shen.keep.app.fragment;import android.os.Bundle;import android.os.Handler;import android.os.Message;import android.support.annotation.Nullable;import android.support.v7.app.AlertDialog;import android.view.LayoutInflater;import android.view.View;import android.view.ViewGroup;import android.widget.Button;import android.widget.RelativeLayout;import android.widget.TextView;import com.shen.keep.R;import com.shen.keep.app.KeepApp;import com.shen.keep.app.KeepDataManager;import com.shen.keep.app.db.KeepDao;import com.shen.keep.core.base.BaseFragment;import com.shen.keep.core.util.CustomToast;import com.shen.keep.core.util.LogUtils;import com.shen.keep.core.util.SharedPreUtil;import com.shen.keep.core.util.TimeUtils;import com.shen.keep.core.widget.KeepTitleLayout;import com.shen.keep.model.Keep;import java.lang.ref.WeakReference;import java.text.SimpleDateFormat;import java.util.Date;import java.util.List;import java.util.Timer;import java.util.TimerTask;import butterknife.Bind;import butterknife.ButterKnife;import butterknife.OnClick;/** * Created by edianzu on 2016/9/2. */public class HomeTabFragment extends BaseFragment {    @Bind(R.id.keep_top_title_layout)    KeepTitleLayout keepTopTitleLayout;    @Bind(R.id.keep_quote)    TextView keepQuote;    @Bind(R.id.quote_layout)    RelativeLayout quoteLayout;    @Bind(R.id.keep_time)    TextView keepTime;    @Bind(R.id.time_layout)    RelativeLayout timeLayout;    @Bind(R.id.continue_btn)    Button continueBtn;    @Bind(R.id.pause_btn)    Button pauseBtn;    @Bind(R.id.stop_btn)    Button stopBtn;    @Bind(R.id.action_layout)    RelativeLayout actionLayout;    @Bind(R.id.keep_sum_time_tv)    TextView keepSumTimeTv;    public static HomeTabFragment newInstance(int index) {        HomeTabFragment homeTabFragment = new HomeTabFragment();        Bundle bundle = new Bundle();        bundle.putInt("index", index);        homeTabFragment.setArguments(bundle);        return homeTabFragment;    }    @Override    public void onCreate(@Nullable Bundle savedInstanceState) {        super.onCreate(savedInstanceState);    }    @Nullable    @Override    public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {        mView = inflater.inflate(R.layout.fragment_home, container, false);        super.onCreateView(inflater, container, savedInstanceState);        ButterKnife.bind(this, mView);        startTime = SharedPreUtil.get(mContext, "start_cnt", 0L);        long exitTime = SharedPreUtil.get(mContext, "exit_time", 0L);        if (startTime > 0) {            if (0 != exitTime) {                long secCnt = (System.currentTimeMillis() - exitTime) / 1000;                if (secCnt > 0 && 0 != startTime) {                    startTime += secCnt;                }                isStart = true;                isPause = false;                continueKeep();                keepTime.setText(getTimerStrByCount(startTime));                timer.schedule(timerTask, 1000, 1000);            }        }        queryKeepTime();        return mView;    }    @Override    public void onResume() {        super.onResume();        if(null != handler){            Message msg = Message.obtain();            msg.what = 2;            handler.sendMessageDelayed(msg,2000);        }    }    @Override    public void onPause() {        super.onPause();    }    @Override    public void clearObject() {    }    @Override    public void clearView() {    }    @Override    public void onDestroyView() {        super.onDestroyView();        ButterKnife.unbind(this);        SharedPreUtil.put(mContext, "start_cnt", startTime);        if (!isPause) {            SharedPreUtil.put(mContext, "exit_time", System.currentTimeMillis());        }        if (null != stopDialog) {            stopDialog.dismiss();            stopDialog = null;        }        if (null != handler) {            handler.removeCallbacksAndMessages(null);            handler.clearTimer();            handler = null;        }        if (null != timer) {            timer.cancel();            timer = null;        }        if (null != timerTask) {            timerTask = null;        }    }    private void queryKeepTime() {        KeepDao keepDao = KeepApp.getAppInstance().getDaoSession().getKeepDao();        if (null != keepDao) {            List<Keep> keepList = keepDao.loadAll();            long keepTime = 0;            for (Keep keep : keepList) {                keepTime += keep.getKeepSecNum();            }            keepSumTimeTv.setText(TimeUtils.getTimerStrBySecNum(keepTime));        }    }    AlertDialog startDialog;    private void showStartDialog() {        LayoutInflater inflater = LayoutInflater.from(mContext);        View view = inflater.inflate(R.layout.dialog_start_layout, null);        startDialog = new AlertDialog.Builder(mContext)                .setView(view).create();        view.findViewById(R.id.dialog_start_btn).setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                isStart = true;                isPause = false;                continueKeep();                SharedPreUtil.put(mContext, "start_time", System.currentTimeMillis());                keepTime.setText(getTimerStrByCount(startTime));                if (null == timerTask) {                    timerTask = new CustomTimerTask(handler);                }                timer.schedule(timerTask, 1000, 1000);                CustomToast.show(mContext, "GO！祝你成功！");                startDialog.dismiss();            }        });        view.findViewById(R.id.dialog_cancel_btn).setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                CustomToast.showLong(mContext, "希望下次，你可以有一颗坚持之心");                startDialog.dismiss();            }        });        startDialog.show();        if (null != startDialog) {            startDialog.getWindow().setBackgroundDrawableResource(R.color.transparent);        }    }    @OnClick({R.id.continue_btn, R.id.pause_btn, R.id.stop_btn})    public void onClick(View view) {        switch (view.getId()) {            case R.id.continue_btn:                continueKeep();                break;            case R.id.pause_btn:                if (!isStart) {                    showStartDialog();                } else {                    isPause = true;                    continueBtn.setVisibility(View.VISIBLE);                    stopBtn.setVisibility(View.VISIBLE);                    pauseBtn.setVisibility(View.GONE);                }                break;            case R.id.stop_btn:                showStopDialog();                break;        }    }    AlertDialog stopDialog;    /**     * 显示停止坚持的提示框     */    private void showStopDialog() {        LayoutInflater inflater = LayoutInflater.from(mContext);        View view = inflater.inflate(R.layout.dialog_stop_layout, null);        stopDialog = new AlertDialog.Builder(mContext)                .setView(view).create();        view.findViewById(R.id.dialog_continue_btn).setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                continueKeep();                stopDialog.dismiss();            }        });        view.findViewById(R.id.dialog_stop_btn).setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                saveKeepInfo();                isStart = false;                continueBtn.setVisibility(View.GONE);                stopBtn.setVisibility(View.GONE);                pauseBtn.setVisibility(View.VISIBLE);                pauseBtn.setText("开始");                queryKeepTime();                stopDialog.dismiss();            }        });        stopDialog.show();        stopDialog.getWindow().setBackgroundDrawableResource(R.color.transparent);    }    private void saveKeepInfo() {        long start_time = SharedPreUtil.get(mContext, "start_time", 0L);        long currTime = System.currentTimeMillis();        String startDate = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(new Date(start_time));        String stopDate = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(new Date(currTime));        long pauseTime = (currTime - start_time) / 1000 - startTime;        Keep keep = new Keep();        KeepDao keepDao = KeepApp.getAppInstance().getDaoSession().getKeepDao();        if (null != keepDao) {            keep.setKeepName("Keep");            keep.setKeepTime(getTimerStrByCount(startTime));            keep.setStartTime(start_time);            keep.setStopTime(currTime);            keep.setStartDate(startDate);            keep.setStopDate(stopDate);            keep.setPauseTime(getTimerStrByCount(pauseTime));            keep.setKeepSecNum(startTime);            keepDao.insert(keep);            LogUtils.i("保存坚持时间" + keep.toString());        }        isPause = true;        startTime = 0L;        SharedPreUtil.put(mContext, "start_cnt", 0L);        SharedPreUtil.put(mContext, "exit_time", 0L);        if (null != timerTask) {            timerTask.cancel();            timerTask = null;        }    }    /**     * 继续坚持     */    private void continueKeep() {        isPause = false;        pauseBtn.setText("暂停");        continueBtn.setVisibility(View.GONE);        stopBtn.setVisibility(View.GONE);        pauseBtn.setVisibility(View.VISIBLE);    }    private long startTime;//已经开始坚持的时间    private boolean isPause = false;//现在是否处于暂停状态    private boolean isStart = false;//状态是否为开始状态    private Timer timer = new Timer();    private TimerHandler handler = new TimerHandler(this);    private CustomTimerTask timerTask = new CustomTimerTask(handler);    private static class CustomTimerTask extends TimerTask {        private WeakReference<TimerHandler> weakReference;        public CustomTimerTask(TimerHandler timerHandler) {            weakReference = new WeakReference<>(timerHandler);        }        @Override        public void run() {            TimerHandler timerHandler = weakReference.get();            if (null != timerHandler) {                Message message = timerHandler.obtainMessage();                message.what = 1;                timerHandler.sendMessage(message);            }        }    }    private static class TimerHandler extends Handler {        private WeakReference<HomeTabFragment> weakReference;        HomeTabFragment homeTabFragment;        public TimerHandler(HomeTabFragment homeTabFragment) {            weakReference = new WeakReference<>(homeTabFragment);        }        @Override        public void dispatchMessage(Message msg) {            super.dispatchMessage(msg);            if (null == homeTabFragment) {                homeTabFragment = weakReference.get();            }            switch (msg.what){                case 1:                    //更新计时器                    if (null != homeTabFragment) {                        if (!homeTabFragment.isPause) {                            homeTabFragment.startTime++;                            homeTabFragment.keepTime.setText(homeTabFragment.getTimerStrByCount(homeTabFragment.startTime));                        }                    }                    break;                case 2:                    //更新本地缓存数据                    KeepDataManager.getKeepDataManager().startUpdateData();                    break;                default:                    break;            }        }        public void clearTimer() {            weakReference = null;            homeTabFragment = null;        }    }    private String getTimerStrByCount(long lapseTime) {        StringBuilder result = new StringBuilder();        int second = (int) Math.floor(lapseTime % 60); // 计算秒        int minite = (int) Math.floor((lapseTime / 60) % 60); // 计算分        int day = (int) Math.floor((lapseTime / 3600) / 24); // 计算天        int hour1 = (int) (Math.floor(lapseTime / 3600) - day * 24); // 计算小时详情页        if (hour1 < 10) {            result.append("0" + hour1);        } else {            result.append(hour1);        }        result.append(":");        if (minite < 10) {            result.append("0" + minite);        } else {            result.append(minite);        }        result.append(":");        if (second < 10) {            result.append("0" + second);        } else {            result.append(second);        }        return result.toString();    }    public void onBackPressed() {        if (isPause) {            saveKeepInfo();            CustomToast.show(mContext, "完成坚持活动，下次再来喽！");        } else {            SharedPreUtil.put(mContext, "start_cnt", startTime);            SharedPreUtil.put(mContext, "exit_time", System.currentTimeMillis());        }    }}