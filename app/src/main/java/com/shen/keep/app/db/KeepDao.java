package com.shen.keep.app.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.shen.keep.model.Keep;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "KEEP".
*/
public class KeepDao extends AbstractDao<Keep, Long> {

    public static final String TABLENAME = "KEEP";

    /**
     * Properties of entity Keep.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property StartTime = new Property(1, long.class, "startTime", false, "startTime");
        public final static Property StopTime = new Property(2, long.class, "stopTime", false, "stopTime");
        public final static Property StartDate = new Property(3, String.class, "startDate", false, "startDate");
        public final static Property StopDate = new Property(4, String.class, "stopDate", false, "stopDate");
        public final static Property KeepTime = new Property(5, String.class, "keepTime", false, "keepTime");
        public final static Property KeepName = new Property(6, String.class, "keepName", false, "keepName");
        public final static Property PauseTime = new Property(7, String.class, "pauseTime", false, "pauseTime");
        public final static Property KeepSecNum = new Property(8, long.class, "keepSecNum", false, "keepSecNum");
    }


    public KeepDao(DaoConfig config) {
        super(config);
    }
    
    public KeepDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"KEEP\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"startTime\" INTEGER NOT NULL ," + // 1: startTime
                "\"stopTime\" INTEGER NOT NULL ," + // 2: stopTime
                "\"startDate\" TEXT," + // 3: startDate
                "\"stopDate\" TEXT," + // 4: stopDate
                "\"keepTime\" TEXT," + // 5: keepTime
                "\"keepName\" TEXT," + // 6: keepName
                "\"pauseTime\" TEXT," + // 7: pauseTime
                "\"keepSecNum\" INTEGER NOT NULL );"); // 8: keepSecNum
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"KEEP\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Keep entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getStartTime());
        stmt.bindLong(3, entity.getStopTime());
 
        String startDate = entity.getStartDate();
        if (startDate != null) {
            stmt.bindString(4, startDate);
        }
 
        String stopDate = entity.getStopDate();
        if (stopDate != null) {
            stmt.bindString(5, stopDate);
        }
 
        String keepTime = entity.getKeepTime();
        if (keepTime != null) {
            stmt.bindString(6, keepTime);
        }
 
        String keepName = entity.getKeepName();
        if (keepName != null) {
            stmt.bindString(7, keepName);
        }
 
        String pauseTime = entity.getPauseTime();
        if (pauseTime != null) {
            stmt.bindString(8, pauseTime);
        }
        stmt.bindLong(9, entity.getKeepSecNum());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Keep entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getStartTime());
        stmt.bindLong(3, entity.getStopTime());
 
        String startDate = entity.getStartDate();
        if (startDate != null) {
            stmt.bindString(4, startDate);
        }
 
        String stopDate = entity.getStopDate();
        if (stopDate != null) {
            stmt.bindString(5, stopDate);
        }
 
        String keepTime = entity.getKeepTime();
        if (keepTime != null) {
            stmt.bindString(6, keepTime);
        }
 
        String keepName = entity.getKeepName();
        if (keepName != null) {
            stmt.bindString(7, keepName);
        }
 
        String pauseTime = entity.getPauseTime();
        if (pauseTime != null) {
            stmt.bindString(8, pauseTime);
        }
        stmt.bindLong(9, entity.getKeepSecNum());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Keep readEntity(Cursor cursor, int offset) {
        Keep entity = new Keep( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getLong(offset + 1), // startTime
            cursor.getLong(offset + 2), // stopTime
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // startDate
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // stopDate
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // keepTime
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // keepName
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // pauseTime
            cursor.getLong(offset + 8) // keepSecNum
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Keep entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setStartTime(cursor.getLong(offset + 1));
        entity.setStopTime(cursor.getLong(offset + 2));
        entity.setStartDate(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setStopDate(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setKeepTime(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setKeepName(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setPauseTime(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setKeepSecNum(cursor.getLong(offset + 8));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Keep entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Keep entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Keep entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
